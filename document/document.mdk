[INCLUDE=style/ieee]
Title       : Bug-Learning

Author      : Author 1
Affiliation : anonymous univ
Email       : anonymous@anonymous.edu

Author      : Author 2
Affiliation : anonymous univ
Email       : anonymous@anonymous.edu

Author      : Author 3
Affiliation : anonymous univ
Email       : anonymous@anonymous.edu

Bibliography: example.bib
Logo        : True

[TITLE]

~ Abstract
This project is to develop machine learning models for detecting bugs in large scale 
parallel programs written using MPI , openMP.
~

# Introduction     { #sec-intro }



# Related Work

[@miller2014foundational] is a paper i am currently reading.
[@adhianto2010hpctoolkit] describes HPC toolkit.

# Methodology

## Gather Data


## Gather knowledge

## Visualise

## Construct a model

## Perform Inference

![Lifecycle] 

[source](http://mbmlbook.com/LifeCycle.html)  

## Evaluate Results




### Acknowledgments {-}

I would like to thank ...

[BIB]

&pagebreak;

# An appendix { @h1:"A" }

## SNIPETTS TO WRITE THIS PAPER

### PROOFS
~ Lemma { #lemma-test; caption:"A __lemma__ caption" }
There he lay, a vast red-golden dragon, fast asleep; thrumming came from
his jaws and nostrils, and wisps of smoke, but his fires were low in
slumber
~

~ Proof { caption:"Of Lemma [#lemma-test]" }
Roads go ever ever on. &qed;
~

### TODOS

~ Todo 
Finish the proof
~

### CODES

    for i:=maxint to 0 do
    begin 
        j:=square(root(i));
    end;

Let's program some JavaScript:
``` javascript
function hello() {
  return "hello world!"
}
```

### MATH

A definition of $e$ is shown in Equation [#euler]:

~ Equation { #euler }
e = \lim_{n\to\infty} \left( 1 + \frac{1}{n} \right)^n
~


# Conclusion


[Lifecycle]: images/Lifecycle.png "Lifecycle" { width:auto; max-width:90% }